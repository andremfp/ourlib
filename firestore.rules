rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'Users' collection
    match /users/{userId} {
      allow create: if true;
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'Books' collection
    match /books/{bookId} {
      // Only allow creating a book if the user is authenticated and the library is owned by the user
      allow create: if request.auth != null &&
              exists(/databases/$(database)/documents/libraries/$(request.resource.data.library)) &&
              get(/databases/$(database)/documents/libraries/$(request.resource.data.library)).data.owner == request.auth.uid;

      // Only allow reading a book if the user is authenticated and the library is owned by them or they are a subscriber
      allow read: if request.auth != null &&
                  (get(/databases/$(database)/documents/libraries/$(resource.data.library)).data.owner == request.auth.uid ||
                   get(/databases/$(database)/documents/libraries/$(resource.data.library)).data.subscribers.hasAny([request.auth.uid]));

      // Allow updating the book if the user is authenticated and either the owner of the library or the book is lent to them (borrower need to be subscriber of library)
      allow update: if request.auth != null &&
                    (get(/databases/$(database)/documents/libraries/$(resource.data.library)).data.owner == request.auth.uid ||
                     (resource.data.lentTo == request.auth.uid && request.resource.data.diff(resource.data).changedKeys().hasOnly(['lentTo', 'lentAt']) && get(/databases/$(database)/documents/libraries/$(resource.data.library)).data.subscribers.hasAny([request.auth.uid])));

      // Allow deleting the book if the user is authenticated, the book is not lent out, and they are the library owner
      allow delete: if request.auth != null &&
                    get(/databases/$(database)/documents/libraries/$(resource.data.library)).data.owner == request.auth.uid &&
                    resource.data.lentTo == null;
    }

    // Rules for the 'Libraries' collection
    match /libraries/{libraryId} {
      // Allow creating a library only if the user is authenticated
      allow create: if request.auth != null;

      // Allow reading the library if the user is authenticated and either the owner, a subscriber, or a friend of the owner
      allow read: if request.auth != null && (
        resource.data.owner == request.auth.uid || 
        resource.data.subscribers.hasAny([request.auth.uid]) || 
        exists(/databases/$(database)/documents/users/$(resource.data.owner)) && 
        get(/databases/$(database)/documents/users/$(resource.data.owner)).data.friends.hasAny([request.auth.uid])
      );

      // Allow updating the library only if the user is the owner of the library
      allow update: if request.auth != null && resource.data.owner == request.auth.uid;

      // Allow subscribers or friends of the owner to update the 'subscribers' field only
      allow update: if request.auth != null && (
          resource.data.subscribers.hasAny([request.auth.uid]) || 
          exists(/databases/$(database)/documents/users/$(resource.data.owner)) && 
          get(/databases/$(database)/documents/users/$(resource.data.owner)).data.friends.hasAny([request.auth.uid])
      ) &&  request.resource.data.diff(resource.data).changedKeys().hasOnly(['subscribers']);

      // Allow deleting a library only if the user is the owner of the library
      allow delete: if request.auth != null && resource.data.owner == request.auth.uid;
    }

    // Rules for the 'Updates' collection
    match /updates/{updateId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || 
      (resource.data.visibleTo != null && resource.data.visibleTo.hasAny([request.auth.uid])));
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Default: Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
